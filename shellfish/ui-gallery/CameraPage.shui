/*******************************************************************************
This file is part of the Shellfish UI toolkit examples.
Copyright (c) 2020 Martin Grimme <martin.grimme@gmail.com>

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*******************************************************************************/

require "shellfish/ui";
require "./Header.shui";

Page {
    id: page

    into header Header {
        id: header

        page: parent
        title: "Camera"
        subtitle: "Status: " + cam.status
        codeUrl: __filename
    }

    Box {
        fillWidth: true
        height: documentRoot.windowHeight

        Box {
            marginTop: header.height + theme.paddingSmall
            fillWidth: true
            height: theme.itemHeightSmall
            layout: "center-row"

            Label {
                marginLeft: theme.paddingLarge
                text: "Select Camera"
            }

            SelectionBox {
                id: cameraSelector

                property deviceId: cam.devices.length > 0 && selection[0] ? cam.devices[selection[0]].deviceId
                                                                          : ""

                onSelectionChanged: {
                    console.log("selection: " + selection);
                }

                marginLeft: theme.paddingSmall
                fillWidth: true
                options: cam.devices.map((dev) => { return dev.label; })
            }

            Label {
                marginLeft: theme.paddingSmall
                text: "Max Resolution"
            }

            SelectionBox {
                id: resolutionSelector

    	        property res: cam.resolutions[selection[0]]
                
                marginLeft: theme.paddingSmall
                options: cam.resolutions
            }

            Button {
                enabled: cam.status !== pending
                width: theme.itemWidthLarge
                marginLeft: theme.paddingSmall
                marginRight: theme.paddingLarge
                text: cam.active ? "Deactivate" : "Activate"
                onClick: {
                    cam.active = ! cam.active;
                }
            }
        }

        Box {
            marginTop: theme.paddingSmall
            fillWidth: true
            fillHeight: true
            color: "black"

            CameraView {
                id: cam

                visible: false
                fillWidth: true
                fillHeight: true

                deviceId: cameraSelector.deviceId
                maxResolution: resolutionSelector.res
            }

            Canvas {
                id: camCnv
                fillWidth: true
                fillHeight: true
                originalWidth: cam.originalWidth
                originalHeight: cam.originalHeight
            }

            Timer {
                running: cam.active
                interval: 1000 / 24
                repeat: true

                onTimeout: {
                    const ctx = camCnv.context2d;
                    const video = cam.get();
                    ctx.drawImage(direct video.get(), 0, 0, camCnv.originalWidth, camCnv.originalHeight);
                }
            }

            Label {
                visible: cam.status === "error" || cam.status === "inactive"
                position: "free"
                x: (parent.bbox.width - bbox.width) / 2
                y: (parent.bbox.height - bbox.height) / 2
                fontSize: theme.fontSizeLarge
                color: "white"
                text: cam.status === "error" ? "Camera Access Denied"
                                             : "Camera Inactive"
            }
        }//Box

        Label {
            marginTop: theme.paddingMedium
            marginLeft: theme.paddingLarge
            marginBottom: theme.paddingLarge
            text: "Width: " + cam.originalWidth + " px, Height: " + cam.originalHeight + " px"
        }

    }//Box

}