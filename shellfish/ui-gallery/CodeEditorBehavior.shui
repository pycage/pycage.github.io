/*******************************************************************************
This file is part of the Shellfish UI toolkit examples.
Copyright (c) 2021 Martin Grimme <martin.grimme@gmail.com>

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*******************************************************************************/

Object {

    property target: parent
    property tabWidth: 4

    function indentRow(row, col)
    {
        const newCol = col + tabWidth;
        const pos = newCol - (newCol % tabWidth);
        const advance = pos - col;

        let s = "";
        for (let i = 0; i < advance; ++i)
        {
            s += " ";
        }
        target.insertAt(target.positionAt(row, col), s);
    }

    function deindentRow(row)
    {
        const rowStart = target.positionAt(row, 0);
        let pos = rowStart;
        while (target.text[pos] === " " && pos < rowStart + tabWidth)
        {
            ++pos;
        }
        target.eraseAt(rowStart, pos - rowStart);
    }

    function rowIndentation(row)
    {
        const rowStart = target.positionAt(row, 0);
        let pos = rowStart;
        let i = 0;
        while (target.text[pos] === " ")
        {
            ++pos;
            ++i;
        }
        return i;
    }

    function lineAt(row)
    {
        const pos1 = target.positionAt(target.row, 0);
        let pos2 = target.text.indexOf("\n", pos1);
        if (pos2 === -1)
        {
            pos2 = target.text.length - 1;
        }
        return target.text.substring(pos1, pos2);
    }

    target.onKeyDown: (ev) =>
    {
        if (ev.key === "Tab")
        {
            const r = target.row;
            const c = target.column;

            if (target.selectionStart < target.selectionEnd)
            {
                // indent selected block
                const firstRow = target.rowAt(target.selectionStart);
                const lastRow = target.rowAt(target.selectionEnd - 1);

                for (let row = lastRow; row >= firstRow; --row)
                {
                    if (ev.shiftKey)
                    {
                        // de-indent
                        deindentRow(row);
                    }
                    else
                    {
                        indentRow(row, 0);
                    }
                }
            }
            else
            {
                indentRow(r, c);
            }

            ev.accepted = true;
        }
        else if (ev.key === "Enter")
        {
            // find indentation of current line
            const r = target.row;
            const c = target.column;
            const line = target.text.substr(target.positionAt(r, 0), c);

            // is the last character a '{'?
            const blockOpened = line.trimRight().endsWith("{");

            const indentation = rowIndentation(target.row) + 
                                (blockOpened ? tabWidth : 0);

            if (indentation > 0)
            {
                let s = "";
                for (let i = 0; i < indentation; ++i)
                {
                    s += " ";
                }

                window.setTimeout(() =>
                {
                    target.insertAt(target.positionAt(r, c) + 1, s);
                    /*
                    if (blockOpened)
                    {
                        // close block after cursor
                        const s2 = s.substr(0, Math.max(0, s.length - tabWidth));
                        target.insertAt(target.positionAt(r, c) + 1 + s.length, "\n" + s2 + "}");
                    }
                    */
                    target.setCursor(r + 1, s.length);
                }, 50 /* must not be 0 for the sake of Mozilla */);
            }
        }
        else if (ev.key === "Backspace")
        {
            const prefix = target.text.substr(positionAt(target.row, 0), target.column).trim();
            if (target.column > 0 && target.column % tabWidth === 0 && prefix.length === 0)
            {
                const r = target.row;
                const c = target.column;
                target.eraseAt(target.selectionStart - tabWidth, tabWidth);
                ev.accepted = true;
            }
        }
        else if (ev.key === "Home")
        {
            const col = rowIndentation(target.row);

            if (target.column !== col)
            {
                target.setCursor(target.row, col);
            }
            else
            {
                target.setCursor(target.row, 0);
            }

            ev.accepted = true;
        }
        else if (ev.key === "ArrowUp" && ev.altKey)
        {
            // move selected block up one line
            const firstRow = target.rowAt(target.selectionStart);
            const lastRow = target.rowAt(Math.max(target.selectionStart, target.selectionEnd - 1));

            if (firstRow > 0)
            {
                target.shiftRows(firstRow, lastRow, -1);
            }
            ev.accepted = true;
        }
        else if (ev.key === "ArrowDown" && ev.altKey)
        {
            // move selected block down one line
            const firstRow = target.rowAt(target.selectionStart);
            const lastRow = target.rowAt(Math.max(target.selectionStart, target.selectionEnd - 1));

            target.shiftRows(firstRow, lastRow, 1);
            ev.accepted = true;
        }
        else if (ev.key === "}" && target.row > 0)
        {
            if (lineAt(target.row).trim().length === 0)
            {
                const wantedIndentation = Math.max(0, rowIndentation(target.row - 1) - tabWidth);
                const thisIndentation = rowIndentation(target.row);
                const rowStart = target.positionAt(target.row, 0);

                if (thisIndentation > wantedIndentation)
                {
                    target.eraseAt(rowStart, thisIndentation - wantedIndentation);
                }
                else if (thisIndentation < wantedIndentation)
                {
                    let s = "";
                    for (let i = thisIndentation; i < wantedIndentation; ++i)
                    {
                        s += " ";
                    }
                    target.insertAt(rowStart, s);
                }
            }
        }        
    }
}